<document>
    <section>
        <title>1 Introduction</title>
        <text>
        Chapter Objectives
        ■ Introduce the Java programming language.
        ■ Describe the steps involved in program compilation and execution.
        ■ Explore the issues related to problem solving in general.
        ■ Discuss the activities involved in the software development
        process.
        ■ Present an overview of object-oriented principles.

        This text is about writing well-designed software. We
        begin by examining a very basic Java program and using it
        to explore some initial programming concepts. We then lay
        the groundwork for software development on a larger scale,
        exploring the foundations of problem solving, the activi-
        ties involved in software development, and the principles of
        object-oriented programming.
        </text>
    </section>
    <section>
        <title>1.1 The Java Programming Language</title>
        <text>
            A computer is made up of hardware and software. The hardware components of
            a computer system are the physical, tangible pieces that support the computing

            effort. They include chips, boxes, wires, keyboards, speakers, disks, cables, print-
            ers, and so on. The hardware is essentially useless without instructions to tell it

            what to do. A program is a series of instructions that the hardware executes one
            after another. Programs are sometimes called applications. Software consists of
            programs and the data those programs use. Software is the intangible counterpart
            to the physical hardware components. Together, they form a tool that we can use
            to solve problems.

            A program is written in a particular programming language that
            uses specific words and symbols to express the problem solution. A
            programming language defines a set of rules that determines exactly

            how a programmer can combine the words and symbols of the lan-
            guage into programming statements, which are the instructions that

            are carried out when the program is executed.
            Since the inception of computers, many programming languages have been
            created. We use the Java language in this text to demonstrate various programming

            concepts and techniques. Although our main goal is to learn these underlying soft-
            ware development concepts, an important side effect will be to become proficient

            in the development of Java programs.
            Java is a relatively new programming language compared to many others. It was

            developed in the early 1990s by James Gosling at Sun Microsystems. Java was in-
            troduced to the public in 1995 and has gained tremendous popularity since.

            Java has undergone various changes since its creation. The most recent Java
            technology is generally referred to as the Java 2 Platform, which is organized into
            three major groups:
            ■ Java 2 Platform, Standard Edition (J2SE)
            ■ Java 2 Platform, Enterprise Edition (J2EE)
            ■ Java 2 Platform, Micro Edition (J2ME)
            This text focuses on the Standard Edition, which, as the name implies, is the
            mainstream version of the language and associated tools. Furthermore, this book is
            consistent with any recent versions of Java, and it can be used with Java 5, 6, or 7.
            Some parts of early Java technologies have been deprecated, which means they
            are considered old-fashioned and should not be used. When it is important, we point
            out deprecated elements and discuss the preferred alternatives.

            Java is an object-oriented programming language. Objects are the fundamen-
            tal elements that make up a program. The principles of object-oriented software

            Key Concept
            A computer system consists of
            hardware and software that work in
            concert to help us solve problems.

            development are the cornerstone of this text. We explore object-
            oriented programming concepts later in this chapter and throughout

            the rest of the text.
            The Java language is accompanied by a library of extra software
            that we can use when developing programs. This software is referred
            to as the Java API, which stands for Application Programmer Interfaces, or simply
            the standard class library. It provides the ability to create graphics, communicate
            over networks, and interact with databases, among many other features. The Java
            API is huge and quite versatile. Although we won’t be able to cover all aspects of
            the library, we will explore many of them.
            Java is used in commercial environments all over the world. It is one of the
            fastest-growing programming technologies of all time. Thus it is not only a good
            language in which to learn programming concepts but also a practical language
            that will serve you well in the future.

            <section>
                <title>A Java Program</title>
                <text>
                    Let’s look at a simple but complete Java program. The program in Listing 1.1
                    prints two sentences to the screen. This particular program prints a quotation from
                    Abraham Lincoln. The output is shown below the program listing.
                    All Java applications are similar in basic structure. Despite its small size and
                    simple purpose, this program contains several important features. Let’s carefully
                    dissect it and examine its pieces.

                    The first few lines of the program are comments, which start with the // sym-
                    bols and continue to the end of the line. Comments don’t affect what the program

                    does but are included to make the program easier to understand by humans.
                    Programmers can and should include comments as needed throughout a program

                    to clearly identify the purpose of the program and describe any special process-
                    ing. Any written comments or documents, including a user’s guide and technical

                    references, are called documentation. Comments included in a program are called
                    inline documentation.
                    The rest of the program is a class definition. This class is called
                    Lincoln, although we could have named it just about anything we
                    wished. The class definition runs from the first opening brace ({) to
                    the final closing brace (}) on the last line of the program. All Java
                    programs are defined using class definitions.
                    Inside the class definition are some more comments describing the purpose of
                    the main method, which is defined directly below the comments. A method is a
                    group of programming statements that is given a name. In this case, the name
                    of the method is main and it contains only two programming statements. Like a
                    class definition, a method is delimited by braces.

                    Key Concept
                    This text focuses on the principles of
                    object-oriented programming.

                    Key Concept
                    Comments do not affect a program’s
                    processing; instead, they serve to
                    facilitate human comprehension.

                    All Java applications have a main method, which is where processing begins.
                    Each programming statement in the main method is executed, one at a time in
                    order, until the end of the method is reached. Then the program ends, or terminates.
                    The main method definition in a Java program is always preceded by the words
                    public, static, and void, which we examine later in the text. The use of String
                    and args does not come into play in this particular program. We describe these
                    later also.
                    The two lines of code in the main method invoke another method called
                    println (pronounced print line). We invoke, or call, a method when we want it
                    to execute. The println method prints the specified characters to the screen. The
                    characters to be printed are represented as a character string, enclosed in double
                    quote characters ("). When the program is executed, it calls the println method
                    to print the first statement, then it calls that method again to print the second
                    statement, and then, because that is the last line in the main method, the program
                    terminates.

                    //********************************************************************
                    // Lincoln.java Java Foundations
                    //
                    // Demonstrates the basic structure of a Java application.
                    //********************************************************************
                    public class Lincoln
                    {
                    //-----------------------------------------------------------------
                    // Prints a presidential quote.
                    //-----------------------------------------------------------------
                    public static void main(String[] args)
                    {
                    System.out.println("A quote by Abraham Lincoln:");
                    System.out.println("Whatever you are, be a good one.");
                    }
                    }
                    O U TP U T
                    A quote by Abraham Lincoln:
                    Whatever you are, be a good one.
                    L ISTIN G 1.1

                    Overview of program
                    elements
                    VideoNote

                    The code executed when the println method is invoked is not defined in this
                    program. The println method is part of the System.out object, which is part
                    of the Java standard class library. It’s not technically part of the Java language,
                    but it is always available for use in any Java program. We explore the println
                    method in more detail in Chapter 2.
                    COMMON ERROR

                    Statements in Java are terminated with a semicolon. If you leave the semi-
                    colon off of a statement, the compiler will get confused and issue an error.

                    Here is an example:
                    System.out.println("Bilbo")
                    System.out.println("Frodo");
                    Without the semicolon on the first line, the compiler doesn’t realize that
                    a new statement has begun. However, most compilers are good at giving
                    clear messages about this problem. It’s easy to forget semicolons when
                    you’re first beginning to program, but including them will soon become
                    second nature.
                </text>
            </section>
            <section>
                <title>Comments</title>
                <text>
                    Let’s examine comments in more detail. Comments are the only language fea-
                    ture that allows programmers to compose and communicate their thoughts

                    independent of the code. Comments should provide insight into the programmer’s

                    original intent. A program may be used for many years, and often many modi-
                    fications are made to it over time. The original programmer may not remember

                    the details of a particular program when, at some point in the future, modi-
                    fications are required. Furthermore, the original programmer is not always

                    available to make the changes; thus, someone completely unfamiliar with the
                    program will need to understand it. Good documentation is therefore essential.

                    As far as the Java programming language is concerned, the content of com-
                    ments can be any text whatsoever. Comments are ignored by the computer; they

                    do not affect how the program executes.

                    The comments in the Lincoln program represent one of two types of com-
                    ments allowed in Java. The comments in Lincoln take the following form:

                    // This is a comment.
                    This type of comment begins with a double slash //) and continues to the end
                    of the line. You cannot have any characters between the two slashes. The computer

                    ignores any text after the double slash to the end of the line. A comment can follow
                    code on the same line to document that particular line, as in the following example:
                    System.out.println ("Monthly Report"); // always use this title
                    The second form a Java comment may take is
                    /* This is another comment. */
                    This comment type does not use the end of a line to indicate the end of the
                    comment. Anything between the initiating slash-asterisk (/*) and the terminating

                    asterisk-slash (*/) is part of the comment, including the invisible newline charac-
                    ter that represents the end of a line. Therefore, this type of comment can extend

                    over multiple lines. There can be no space between the slash and the asterisk.
                    If there is a second asterisk following the /* at the beginning of a comment,

                    the content of the comment can be used to automatically generate external docu-
                    mentation about your program by using a tool called javadoc. More information

                    about javadoc is given in Appendix I.
                    The two basic comment types can be used to create various documentation
                    styles, such as
                    // This is a comment on a single line.
                    //— — — — — — — — — — — — — — — — — — — — — — — — — — — —
                    // Some comments such as those above methods or classes
                    // deserve to be blocked off to focus special attention
                    // on a particular aspect of your code. Note that each of
                    // these lines is technically a separate comment.
                    //— — — — — — — — — — — — — — — — — — — — — — — — — — — —
                    /*
                    This is one comment
                    that spans several lines.
                    */

                    Programmers often concentrate so much on writing code that they

                    focus too little on documentation. You should develop good com-
                    menting practices and follow them habitually. Comments should be

                    well written, often in complete sentences. They should not belabor
                    the obvious but should provide appropriate insight into the intent of
                    the code. The following examples are not good comments:
                    System.out.println("hello"); // prints hello
                    System.out.println("test"); // change this later
                    The first comment paraphrases the obvious purpose of the line and does not
                    add any value to the statement. It is better to have no comment than to add a

                    Key Concept
                    Inline documentation should provide
                    insight into your code. It should not
                    be ambiguous or belabor the obvious.

                    useless one. The second comment is ambiguous. What should be changed later?
                    When is later? Why should it be changed?</text>
            </section>
            <section>
                <title>Identifiers and Reserved Words</title>
                <text>
                    The various words used when writing programs are called identifiers. The identi-
                    fiers in the Lincoln program are class, Lincoln, public, static, void, main,

                    String, args, System, out, and println. These fall into three categories:
                    ■ words that we make up when writing a program (Lincoln and args)
                    ■ words that another programmer chose (String, System, out, println, and main)
                    ■ words that are reserved for special purposes in the language (class, public,
                    static, and void)
                    While writing the program, we simply chose to name the class Lincoln, but we
                    could have used one of many other possibilities. For example, we could have called
                    it Quote, or Abe, or GoodOne. The identifier args (which is short for “arguments”)
                    is often used in the way we use it in Lincoln, but we could have used just about
                    any other identifier in its place.

                    The identifiers String, System, out, and println were chosen by other pro-
                    grammers. These words are not part of the Java language. They are part of the

                    Java standard library of predefined code, a set of classes and methods that some-
                    one has already written for us. The authors of that code chose the identifiers in

                    that code—we’re just making use of them.
                    Reserved words are identifiers that have a special meaning in a programming
                    language and can be used only in predefined ways. A reserved word cannot be used
                    for any other purpose, such as naming a class or method. In the Lincoln program,
                    the reserved words used are class, public, static, and void. Figure 1.1 lists all of
                    the Java reserved words in alphabetical order. The words marked with an asterisk
                    abstract
                    assert
                    boolean
                    break
                    byte
                    case
                    catch
                    char
                    class
                    const*
                    continue

                    default
                    do
                    double
                    else
                    enum
                    extends
                    false
                    final
                    finally
                    float
                    for

                    goto*
                    if
                    implements
                    import
                    instanceof
                    int
                    interface
                    long
                    native
                    new
                    null

                    package
                    private
                    protected
                    public
                    return
                    short
                    static
                    strictfp
                    super
                    switch
                    synchronized
                    this
                    throw
                    throws
                    transient
                    true
                    try
                    void
                    volatile
                    while

                    Fig 01-19
                    Figure 1.1 Java reserved words

                    are reserved for possible future use in later versions of the language but currently
                    have no meaning in Java.
                    An identifier that we make up for use in a program can be composed of any
                    combination of letters, digits, the underscore character (_), and the dollar sign ($),
                    but it cannot begin with a digit. Identifiers may be of any length. Therefore, total,
                    label7, nextStockItem, NUM_BOXES, and $amount are all valid identifiers, but
                    4th_word and coin#value are not valid.
                    Both uppercase and lowercase letters can be used in an identifier, and the
                    difference is important. Java is case-sensitive, which means that two identifier
                    names that differ only in the case of their letters are considered
                    to be different identifiers. Therefore, total, Total, ToTaL, and
                    TOTAL are all different identifiers. As you can imagine, it is not a
                    good idea to use multiple identifiers that differ only in their case,
                    because they can be easily confused.

                    Key Concept
                    Java is case sensitive. The uppercase
                    and lowercase versions of a letter are
                    distinct.

                    Identifier
                    An identifier is a letter followed by zero or more letters and digits.

                    Java Letters include the 26 English alphabetic characters in both up-
                    percase and lowercase, the $ and _ (underscore) characters, as well as

                    alphabetic characters from other languages. Java Digits include the
                    digits 0 through 9.
                    Examples:
                    total
                    MAX_HEIGHT
                    num1
                    computeWage
                    System
                    Although the Java language doesn’t require it, using a consistent case format
                    for each kind of identifier makes your identifiers easier to understand. The various
                    Java conventions regarding identifiers should be followed, although technically
                    they don’t have to be. For example, we use title case (uppercase for the first letter
                    of each word) for class names. Throughout this text, we describe the preferred
                    case style for each type of identifier when it is first encountered.

                    Although an identifier can be of any length, you should choose your names care-
                    fully. They should be descriptive but not verbose. You should avoid meaningless

                    names such as a and x. An exception to this rule can be made if the short name is

                    actually descriptive, such as using x and y to represent (x, y) coordinates on a two-
                    dimensional grid. Likewise, you should not use unnecessarily long names, such as

                    the identifier theCurrentItemBeingProcessed. The name currentItem would
                    serve just as well. As you might imagine, the use of identifiers that are too long is a
                    much less prevalent problem than the use of names that are not descriptive.
                    You should always strive to make your programs as readable as
                    possible. Therefore, you should always be careful when abbreviating
                    words. You might think that curStVal is a good name to represent
                    the current stock value, but another person trying to understand the
                    code might have trouble figuring out what you meant. It might not
                    even be clear to you two months after you wrote it!
                    A name in Java is a series of identifiers separated by the dot (period) character.
                    The name System.out is the way we designate the object through which we invoked
                    the println method. Names appear quite regularly in Java programs.
                </text>
            </section>
            <section>
                <title>White Space</title>
                <text>
                    All Java programs use white space to separate the words and symbols used in
                    a program. White space consists of blanks, tabs, and newline characters. The
                    phrase white space refers to the fact that on a white sheet of paper with black

                    printing, the space between the words and symbols is white. The way a program-
                    mer uses white space is important, because it can be used to emphasize parts of

                    the code and can make a program easier to read.
                    The computer ignores white space except when the white space
                    is used to separate words. It does not affect the execution of a
                    program. This fact gives programmers a great deal of flexibility
                    in how they format a program. The lines of a program should be
                    divided in logical places, and certain lines should be indented and
                    aligned so that the program’s underlying structure is clear.
                    Because white space is ignored, we can write a program in many different
                    ways. For example, taking white space to one extreme, we could put as many
                    words as possible on each line. The code in Listing 1.2, the Lincoln2 program,
                    is formatted quite differently from Lincoln but prints the same message.
                    Taking white space to the other extreme, we could write almost every word

                    and symbol on a different line with varying amounts of spaces. This awkward ap-
                    proach is illustrated by Lincoln3, which is shown in Listing 1.3.

                    Key Concept
                    Identifier names should be descriptive
                    and readable.

                    Key Concept
                    Appropriate use of white space
                    makes a program easier to read and
                    understand.

                    //********************************************************************
                    // Lincoln2.java Java Foundations
                    //
                    // Demonstrates a poorly formatted, though valid, program.
                    //********************************************************************
                    L ISTIN G 1.2

                    //********************************************************************
                    // Lincoln3.java Java Foundations
                    //
                    // Demonstrates another valid program that is poorly formatted.
                    //********************************************************************
                    public class
                    Lincoln3
                    {
                    public
                    static
                    void
                    main
                    (
                    String
                    []
                    args )
                    {
                    System.out.println (
                    "A quote by Abraham Lincoln:" )
                    ; System.out.println
                    (
                    "Whatever you are, be a good one."
                    )
                    ;
                    }
                    }
                    O U TP U T
                    A quote by Abraham Lincoln:
                    Whatever you are, be a good one.
                    L ISTIN G 1.3
                    public class Lincoln2{public static void main(String[]args){
                    System.out.println("A quote by Abraham Lincoln:");
                    System.out.println("Whatever you are, be a good one.");}}
                    O u t p u t
                    A quote by Abraham Lincoln:
                    Whatever you are, be a good one.
                    L ISTIN G 1.2

                    All three versions of Lincoln are technically valid and will execute in
                    the same way, but they are radically different from a reader’s point of view.
                    Both of the latter examples show poor style and make the program difficult

                    to understand. You may be asked to adhere to particular guide-
                    lines when you write your programs. A software development

                    company often has a programming style policy that it requires its

                    programmers to follow. In any case, you should adopt and con-
                    sistently use a set of style guidelines that increases the readability
                    of your code.
                </text>
            </section>
        </text>
    </section>
    <section>
        <title>1.2 Program Development</title>
        <text>
            The process of getting a program running involves various activities. The pro-
            gram has to be written in the appropriate programming language, such as Java.

            That program has to be translated into a form that the computer can execute.

            Errors can occur at various stages of this process and must be fixed. Various soft-
            ware tools can be used to help with all parts of the development process, as well.

            Let’s explore these issues in more detail.

            <section>
                <title>Programming Language Levels</title>
                <text>
                    Suppose a particular person is giving travel directions to a friend. That person
                    might explain those directions in any one of several languages, such as English,
                    Russian, or Italian. The directions are the same no matter which language is used
                    to explain them, but the manner in which the directions are expressed is different.
                    The friend must be able to understand the language being used in order to follow
                    the directions.
                    Similarly, a problem can be solved by writing a program in one of many
                    programming languages, such as Java, Ada, C, C++, C#, Pascal, and Smalltalk.
                    The purpose of the program is essentially the same no matter which language
                    is used, but the particular statements used to express the instructions, and the

                    overall organization of those instructions, vary with each language. A com-
                    puter must be able to understand the instructions in order to carry them out.

                    Programming languages can be categorized into the following four groups.
                    These groups basically reflect the historical development of computer languages.
                    ■ machine language
                    ■ assembly language
                    ■ high-level languages
                    ■ fourth-generation languages

                    Key Concept

                    You should adhere to a set of guide-
                    lines that establishes the way you

                    format and document your programs.


                    In order for a program to run on a computer, it must be expressed in that
                    computer’s machine language. Each type of CPU has its own language. For that
                    reason, we can’t run a program specifically written for a Sun Workstation, with
                    its Sparc processor, on a Dell PC, with its Intel processor.
                    Each machine language instruction can accomplish only a simple task. For
                    example, a single machine language instruction might copy a value into a register
                    or compare a value to zero. It might take four separate machine
                    language instructions to add two numbers together and to store the
                    result. However, a computer can do millions of these instructions
                    in a second, and therefore, many simple commands can be executed
                    quickly to accomplish complex tasks.
                    Machine language code is expressed as a series of binary digits and

                    is extremely difficult for humans to read and write. Originally, pro-
                    grams were entered into the computer by using switches or some similarly tedious

                    method. Early programmers found these techniques to be time-consuming and
                    error-prone.
                    These problems gave rise to the use of assembly language, which replaced

                    binary digits with mnemonics, short English-like words that represent com-
                    mands or data. It is much easier for programmers to deal with words than

                    with binary digits. However, an assembly language program cannot be
                    executed directly on a computer. It must first be translated into machine
                    language.
                    Generally, each assembly language instruction corresponds to an equivalent

                    machine language instruction. Therefore, much like machine language, each as-
                    sembly language instruction accomplishes only a simple operation. Although as-
                    sembly language is an improvement over machine code from a programmer’s per-
                    spective, it is still tedious to use. Both assembly language and machine language

                    are considered low-level languages.

                    Today, most programmers use a high-level language to write
                    software. A high-level language is expressed in English-like phrases

                    and thus is easier for programmers to read and write. A single high-
                    level-language programming statement can accomplish the equiva-
                    lent of many—perhaps hundreds—of machine language instruc-
                    tions. The term high-level refers to the fact that the programming

                    statements are expressed in a way that is far removed from the
                    machine language that is ultimately executed. Java is a high-level language, as
                    are Ada, C++, Smalltalk, and many others.
                    Figure 1.2 shows equivalent expressions in a high-level language, in assembly
                    language, and in machine language. The expressions add two numbers together.
                    The assembly language and machine language in this example are specific to a
                    Sparc processor.

                    Key Concept
                    All programs must be translated into
                    a particular CPU’s machine language
                    in order to be executed.

                    Key Concept

                    High-level languages allow a pro-
                    grammer to ignore the underlying

                    details of machine language.

                    The high-level language expression in Figure 1.2 is readable and intuitive for
                    programmers. It is similar to an algebraic expression. The equivalent assembly
                    language code is somewhat readable, but it is more verbose and less intuitive. The
                    machine language is basically unreadable and much longer. In fact, only a small
                    portion of the binary machine code to add two numbers together is shown in
                    Figure 1.2. The complete machine language code for this particular expression is
                    over 400 bits long.

                    A high-level language insulates programmers from needing to know the underly-
                    ing machine language for the processor on which they are working. But high-level

                    language code must be translated into machine language in order to be executed.
                    Some programming languages are considered to operate at an even higher level

                    than high-level languages. They might include special facilities for automatic re-
                    port generation or interaction with a database. These languages are called fourth-
                    generation languages, or simply 4GLs, because they followed the first three gen-
                    erations of computer programming: machine, assembly, and high-level languages.
                </text>
            </section>
            <section>
                <title>Editors, Compilers, and Interpreters</title>
                <text>
                    Several special-purpose programs are needed to help with the process of develop-
                    ing new programs. They are sometimes called software tools because they are

                    used to build programs. Examples of basic software tools include an editor, a
                    compiler, and an interpreter.
                    Initially, you use an editor as you type a program into a computer and store
                    it in a file. There are many different editors with many different features. You
                    should become familiar with the editor that you will use regularly, because such
                    familiarity can dramatically affect the speed at which you enter and modify your
                    programs.
                    High-Level Language Assembly Language Machine Language
                    <![CDATA[<]]>a + b> 1d [%fp–20], %o0
                    1d [%fp–24], %o1
                    add %o0, %o1, %o0
                    ...
                    1101 0000 0000 0111
                    1011 1111 1110 1000
                    1101 0010 0000 0111
                    1011 1111 1110 1000
                    1001 0000 0000 0000
                    ...

                    Figure 1.2 A high-level expression and its assembly language and
                    Soft
                    machine language equivalents

                    Figure 1.3 shows a very basic view of the program development process.

                    After editing and saving your program, you attempt to translate it from high-
                    level code into a form that can be executed. That translation may result in

                    errors, in which case you return to the editor to make changes to the code to
                    fix the problems. Once the translation occurs successfully, you can execute the
                    program and evaluate the results. If the results are not what you want, or if you
                    want to enhance your existing program, you again return to the editor to make
                    changes.

                    The translation of source code into (ultimately) machine language for a particu-
                    lar type of CPU can occur in a variety of ways. A compiler is a program that trans-
                    lates code in one language into equivalent code in another language. The original

                    code is called source code, and the language into which it is translated is called
                    the target language. For many traditional compilers, the source code is translated
                    directly into a particular machine language. In that case, the translation process

                    occurs once (for a given version of the program), and the resulting executable pro-
                    gram can be run whenever it is needed.

                    An interpreter is similar to a compiler but has an important difference. An inter-
                    preter interweaves the translation and execution activities. A small part of the source

                    code, such as one statement, is translated and executed. Then another statement is

                    translated and executed, and so on. One advantage of this technique is that it elimi-
                    nates the need for a separate compilation phase. However, the program generally

                    runs more slowly because the translation process occurs during each execution.
                    The process generally used to translate and execute Java programs combines
                    the use of a compiler and that of an interpreter. This process is pictured in Figure 1.4.
                    The Java compiler translates Java source code into Java bytecode,
                    which is a representation of the program in a low-level form similar
                    to machine language code. The Java interpreter reads Java bytecode

                    and executes it on a specific machine. Another compiler could trans-
                    late the bytecode into a particular machine language for efficient

                    execution on that machine.
                    The difference between Java bytecode and true machine language code is that
                    Java bytecode is not tied to any particular processor type. This approach has the
                    distinct advantage of making Java architecture-neutral and therefore easily
                    Edit and
                    save program

                    Translate program
                    into executable form
                    errors errors
                    Execute program and
                    evaluate results

                    Figure 1.3 Editing and running a program

                    Key Concept
                    A Java compiler translates Java source
                    code into Java bytecode, a low-level,
                    architecture-neutral representation
                    of the program.


                    portable from one machine type to another. The only restriction is that there must
                    be a Java interpreter or a bytecode compiler for each processor type on which the
                    Java bytecode is to be executed.
                    Because the compilation process translates the high-level Java source code
                    into a low-level representation, the interpretation process is more efficient than

                    interpreting high-level code directly. Executing a program by interpreting its by-
                    tecode is still slower than executing machine code directly, but it is fast enough

                    for most applications. Note that for efficiency, Java bytecode could be compiled
                    into machine code.
                </text>
            </section>
            <section>
                <title>Development Environments</title>
                <text>
                    A software development environment is the set of tools used to create, test, and
                    modify a program. Some development environments are available free, whereas

                    others, which may have advanced features, must be purchased. Some environ-
                    ments are referred to as integrated development environments (IDEs) because

                    they integrate various tools into one software program.
                    Any development environment will contain certain key tools, such as a
                    Java compiler and interpreter. Some include a debugger, which helps you find
                    errors in a program. Other tools that may be included are documentation
                    generators, archiving tools, and tools that help you visualize your program
                    structure.

                    Java source
                    code

                    Java
                    bytecode Java compiler

                    Java
                    interpreter

                    Bytecode
                    compiler

                    Machine
                    code
                    Figure 1.4 The Java translation and execution process

                    Sun Microsystems, the creator of the Java programming language, provides the
                    Java Software Development Kit (SDK), which is sometimes referred to simply as
                    the Java Development Kit (JDK). The SDK can be downloaded free of charge for
                    various hardware platforms from Sun’s Java Web site, java.sun.com, and is also
                    included on the CD that accompanies this text.

                    The SDK tools are not an integrated environment. The commands for compila-
                    tion and interpretation are executed on the command line. That is, the SDK does

                    not have a graphical user interface (GUI), with windows, menus, buttons, and so

                    on. It also does not include an editor, although any editor that can save a docu-
                    ment as simple text can be used.

                    Sun also has a Java IDE called NetBeans (www.netbeans.org) that
                    incorporates the development tools of the SDK into one convenient
                    GUI-based program. IBM promotes a similar IDE called Eclipse (www
                    .eclipse.org). Both NetBeans and Eclipse are open source projects,

                    which means that they are developed by a wide collection of program-
                    mers and are available free.

                    A research group at Auburn University has developed jGRASP, a free Java IDE
                    that is included on the CD that accompanies this text. It can also be downloaded
                    from www.jgrasp.org. In addition to fundamental development tools, jGRASP
                    contains tools that graphically display program elements.
                    Various other Java development environments are available, and several are
                    provided on this text’s CD. The choice of which development environment to use
                    is important. The more you know about the capabilities of your environment, the
                    more productive you can be during program development.
                </text>
            </section>
            <section>
                <title>Syntax and Semantics</title>
                <text>
                    Each programming language has its own unique syntax. The syntax rules of a lan-
                    guage dictate exactly how the vocabulary elements of the language can be combined

                    to form statements. These rules must be followed in order to create a program.

                    We’ve already discussed several Java syntax rules. For instance, the fact that an iden-
                    tifier cannot begin with a digit is a syntax rule. The fact that braces are used to begin

                    and end classes and methods is also a syntax rule. Appendix J formally defines the

                    basic syntax rules for the Java programming language, and specific rules are high-
                    lighted throughout the text.

                    During compilation, all syntax rules are checked. If a program is not syntactically
                    correct, the compiler will issue error messages and will not produce bytecode. Java
                    has a syntax similar to that of the programming languages C and C++, so the look
                    and feel of the code are familiar to people with a background in those languages.
                    The semantics of a statement in a programming language define what will
                    happen when that statement is executed. Programming languages are generally

                    Comparison of Java IDEs
                    VideoNote

                    Key Concept

                    Many different development environ-
                    ments exist to help you create and

                    modify Java programs.


                    unambiguous, which means the semantics of a program are well defined. That is,
                    there is one and only one interpretation for each statement. On the other hand,
                    the natural languages that humans use to communicate, such as English and
                    Italian, are full of ambiguities. A sentence can often have two or more different
                    meanings. For example, consider the following sentence:
                    Time flies like an arrow.
                    The average human is likely to interpret this sentence as a general observation: that time
                    moves quickly in the same way that an arrow moves quickly. However, if we interpret
                    the word time as a verb (as in “run the 50-yard dash and I’ll time you”) and the word
                    flies as a noun (the plural of fly), the interpretation changes completely. We know that
                    arrows don’t time things, so we wouldn’t normally interpret the sentence that way, but
                    it is still a valid interpretation of the words in the sentence. A computer would have a
                    difficult time trying to determine which meaning was intended. Moreover, this sentence
                    could describe the preferences of an unusual insect known as a “time fly,” which might
                    be found near an archery range. After all, fruit flies like a banana.
                    The point is that one specific English sentence can have multiple
                    valid meanings. A computer language cannot allow such ambiguities

                    to exist. If a programming language instruction could have two differ-
                    ent meanings, a computer would not be able to determine which one

                    should be carried out.
                </text>
            </section>

            <section>
                <title>Errors</title>
                <text>
                    Several different kinds of problems can occur in software, particularly during
                    program development. The term computer error is often misused and varies in
                    meaning depending on the situation. From a user’s point of view, anything that
                    goes awry when interacting with a machine can be called a computer error. For
                    example, suppose you charged a $23 item to your credit card, but when you
                    received the bill, the item was listed at $230. After you have the problem fixed,
                    the credit card company apologizes for the “computer error.” Did the computer
                    arbitrarily add a zero to the end of the number, or did it perhaps multiply the
                    value by 10? Of course not. A computer follows the commands we
                    give it and operates on the data we provide. If our programs are
                    wrong or our data inaccurate, then we cannot expect the results to
                    be correct. A common phrase used to describe this situation is “garbage
                    in, garbage out.”
                    You will encounter three kinds of errors as you develop programs:
                    ■ compile-time error
                    ■ run-time error
                    ■ logical error

                    Key Concept
                    Syntax rules dictate the form of
                    a program. Semantics dictate the
                    meaning of the program statements.

                    Key Concept
                    The programmer is responsible for the
                    accuracy and reliability of a program.


                    The compiler checks to make sure you are using the correct syntax. If you
                    have any statements that do not conform to the syntactic rules of the language,
                    the compiler will produce a syntax error. The compiler also tries to find other

                    problems, such as the use of incompatible types of data. The syn-
                    tax might be technically correct, but you may be attempting to

                    do something that the language doesn’t semantically allow. Any
                    error identified by the compiler is called a compile-time error.
                    When a compile-time error occurs, an executable version of the
                    program is not created.
                    The second kind of problem occurs during program execution.
                    It is called a run-time error and causes the program to terminate abnormally.
                    For example, if we attempt to divide by zero, the program will “crash” and
                    halt execution at that point. Because the requested operation is undefined, the
                    system simply abandons its attempt to continue processing your program. The

                    best programs are robust; that is, they avoid as many run-time errors as possi-
                    ble. For example, the program code could guard against the possibility of di-
                    viding by zero and handle the situation appropriately if it arises. In Java, many

                    run-time problems are called exceptions that can be caught and dealt with
                    accordingly.
                    The third kind of software problem is a logical error. In this case, the
                    software compiles and executes without complaint, but it produces incorrect

                    results. For example, a logical error occurs when a value is calculated incor-
                    rectly or when a graphical button does not appear in the correct place. A pro-
                    grammer must test the program thoroughly, comparing the expected results to

                    those that actually occur. When defects are found, they must be traced back
                    to the source of the problem in the code and corrected. The process of finding
                    and correcting defects in a program is called debugging. Logical errors can
                    manifest themselves in many ways, and the actual root cause can be difficult
                    to discover.
                </text>
            </section>

        </text>
    </section>
    <section>
        <title>1.3 Problem Solving</title>
        <text>
            Creating software involves much more than just writing code. The mechanics

            of editing and running a program are necessary steps, but the heart of soft-
            ware development is problem solving. We write a program to solve a particu-
            lar problem.

            In general, problem solving consists of multiple steps:
            1. Understand the problem.
            2. Design a solution.

            Key Concept
            A Java program must be syntactically

            correct or the compiler will not pro-
            duce bytecode.

            Examples of various
            error types
            VideoNote

            3. Consider alternatives to the solution and refine the solution.
            4. Implement the solution.
            5. Test the solution and fix any problems that exist.

            Although this approach applies to any kind of problem solving, it works par-
            ticularly well when developing software. These steps aren’t purely linear. That
            is, some of the activities will overlap others. But at some point, all of these steps
            should be carefully addressed.
            The first step, coming to understand the problem, may sound obvious, but
            a lack of attention to this step has been the cause of many misguided software
            development efforts. If we attempt to solve a problem we don’t completely
            understand, we often end up solving the wrong problem or at least going off
            on improper tangents. Each problem has a problem domain, the real-world
            issues that are key to our solution. For example, if we are going to write a
            program to score a bowling match, then the problem domain includes the rules
            of bowling. To develop a good solution, we must thoroughly understand the
            problem domain.
            The key to designing a problem solution is breaking it down
            into manageable pieces. A solution to any problem can rarely be
            expressed as one big task. Instead, it is a series of small cooperat-
            ing tasks that interact to perform a larger task. When developing
            software, we don’t write one big program. We design separate pieces
            that are responsible for certain parts of the solution, and then we
            integrate them with the other parts.
            The first approach we choose in seeking a solution may not be the best one.
            We must always consider alternatives and refine the solution as necessary. The
            earlier we consider alternatives, the easier it is to modify our approach.
            Implementing the solution consists of putting the solution that we have
            designed in a usable form. When we are developing a software solution to
            a problem, the implementation stage is the process of actually writing the
            program. Too often programming is thought of as writing code. But in most
            cases, the act of designing the program should be far more interesting and cre-
            ative than the process of implementing the design in a particular programming
            language.
            At many points in the development process, we should test our solution to find
            any errors that exist so that we can fix them. Testing cannot guarantee that there
            aren’t still problems yet to be discovered, but it can raise our confidence that we
            have a viable solution.

            Throughout this text, we explore techniques that enable us to design and im-
            plement elegant programs. Although we will often get immersed in these details,
            we should never forget that our primary goal is to solve problems.
        </text>
    </section>
</document>
